
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package es.mpr.plataformamensajeria.ws.envionotificacionespush;

import java.util.ArrayList;
import java.util.List;

import es.mpr.plataformamensajeria.jdbc.EnvioNotificacionPushDAO;
import es.mpr.plataformamensajeria.ws.envionotificacionespush.ResponseStatusType;


/**
 * This class was generated by Apache CXF 2.6.3
 * Generated source version: 2.6.3
 * 
 */

@javax.jws.WebService(
                      serviceName = "EnvioNotificacionPushImplService",
                      portName = "EnvioNotificacionPushImplPort",
                      targetNamespace = "http://envionotificacionpush.ws.plataformamensajeria.minhap.es/",
                      wsdlLocation = "./wsdl/envioNotificacionPush.wsdl",
                      endpointInterface = "es.mpr.plataformamensajeria.ws.envionotificacionespush.IEnvioNotificacionPushService")
                      
public class IEnvioNotificacionPushServiceImpl implements IEnvioNotificacionPushService {
	
	static final String TAG_OK = "OK";
	static final String TAG_KO = "KO";
	static final String TAG_STATUSCODE_OK = "1000";
	
	static final String ID_MENSAJE_ERROR = "0";
	
	static final String TAG_ERROR_GENERAL = "3001";
	static final String TAG_ERROR_GENERAL_FORMATO_PETICION_LOTEENVIO = "3002";
	static final String TAG_ERROR_GENERAL_FORMATO_PETICION_MENSAJE = "3003";
	static final String TAG_ERROR_CREAR_LOTE = "4001";
	static final String TAG_ERROR_CREAR_LOTE_APLICACION = "4002";
	static final String TAG_ERROR_CREAR_LOTE_SERVICIO_APLICACION = "4003";
	static final String TAG_ERROR_CREAR_LOTE_SERVICIO = "4004";
	static final String TAG_ERROR_COMPROBAR_LOTE = "5001";
	static final String TAG_ERROR_COMPROBAR_CANAL = "5002";
	static final String TAG_ERROR_COMPROBAR_NOMBREUSUARIO = "5003";
	
	static final String TAG_MENSAJE_OK = "Petición procesada correctamente";
	static final String TAG_MENSAJE_KO_GENERAL = "Se ha producido un error procesando la peticion";
	static final String TAG_MENSAJE_OK_LOTEENVIO = "El lote de envío se ha creado correctamente";
	static final String TAG_MENSAJE_KO_GENERAL_FORMATO_PETICION_LOTEENVIO = "La peticion no está construida correctamente. Faltan campos obligatorios para generar el lote de envío";
	static final String TAG_MENSAJE_KO_GENERAL_FORMATO_PETICION_MENSAJE = "La peticion no está construida correctamente. Faltan campos obligatorios para generar el mensaje Push";
	static final String TAG_MENSAJE_ERROR_CREAR_LOTE = "No existe lote para el usuario/password o el lote no es correcto";
	static final String TAG_MENSAJE_ERROR_CREAR_LOTE_APLICACION = "No existe aplicación para el usuario/password";
	static final String TAG_MENSAJE_ERROR_CREAR_LOTE_SERVICIO_APLICACION = "El servicio no está asignado a la aplicación";
	static final String TAG_MENSAJE_ERROR_CREAR_LOTE_SERVICIO = "Servicio incorrecto o inactivo";
	static final String TAG_MENSAJE_ERROR_COMPROBAR_LOTE = "No existe lote para el usuario/password o el lote no es correcto";
	static final String TAG_MENSAJE_ERROR_COMPROBAR_CANAL = "No existe canal";
	static final String TAG_MENSAJE_ERROR_COMPROBAR_NOMBREUSUARIO = "El nombre de usuario no está registrado";

    /* (non-Javadoc)
     * @see es.mpr.plataformamensajeria.ws.envionotificacionespush.IEnvioNotificacionPushService#envioNotificacionPush(es.mpr.plataformamensajeria.ws.envionotificacionespush.EnvioNotificacionPushRequest  parameters )*
     */
    public EnvioNotificacionPushResponse envioNotificacionPush(EnvioNotificacionPushRequest parameters) { 
       
        EnvioNotificacionPushResponse _return = new EnvioNotificacionPushResponse();
        MensajesType listaMensajes = new MensajesType();
        
        _return.setMensajes(listaMensajes);
        
        List<ResponseStatusType> listaResponse = new ArrayList<ResponseStatusType>();
        
        EnvioNotificacionPushDAO dao = new EnvioNotificacionPushDAO();
        
        Boolean exito = true;
        
        Integer idLote=null;
        
        dao.beginTransaction();
        
        try{
        	
        	boolean peticionCorrecta = evaluarLoteEnvio(parameters);
        	
        	if(peticionCorrecta){
        		
        		idLote = dao.crearLote(parameters.getServicio(), parameters.getNombreLote(), parameters.getUsuario(), parameters.getPassword());
            	
            	if(null!=idLote){
            		if(idLote>0){
            			
            			_return.setIdLoteEnvio(idLote.toString());
            			_return.setStatusCode(TAG_STATUSCODE_OK);
            			_return.setStatusText(TAG_OK);
            			_return.setDetails(TAG_MENSAJE_OK_LOTEENVIO);
            			
            			List<MensajeNotificacionType> mensajesPush = parameters.getMensajesNotificacion().getMensajeNotificacion();
                		if(null!=mensajesPush && !mensajesPush.isEmpty()){
                			for(MensajeNotificacionType mensajePush : mensajesPush){
                				
                				boolean mensajeCorrecto = evaluarMensaje(mensajePush);
                				
                				if(mensajeCorrecto){
                					
                					Integer idMensaje = dao.crearMensajeNotificacionPush(idLote, mensajePush.getTitulo(), mensajePush.getCuerpo(), 
                    						mensajePush.getDocUsuario(), mensajePush.getCodSia(), mensajePush.getCodOrganismo(), mensajePush.getIcono(),
                    						mensajePush.getSonido(), mensajePush.getIdExterno(), mensajePush.getIdentificadorUsuario(),
                    						parameters.getUsuario(), parameters.getPassword());
                    				
                    				if(null!=idMensaje){
                    					
                    					ResponseStatusType responseStatusType = new ResponseStatusType();
                    					
                    					if(idMensaje>0){
                    						responseStatusType.setIdMensaje(Integer.toString(idMensaje));
                    						responseStatusType.setStatusCode(TAG_STATUSCODE_OK);
                    						responseStatusType.setStatusText(TAG_OK);
                    						responseStatusType.setDetails(TAG_MENSAJE_OK);
                    					} else if(idMensaje.equals(Integer.valueOf(-1))){
                    						exito = false;
                    						responseStatusType.setIdMensaje(ID_MENSAJE_ERROR);
                    						responseStatusType.setStatusCode(TAG_ERROR_COMPROBAR_LOTE);
                    						responseStatusType.setStatusText(TAG_KO);
                    						responseStatusType.setDetails(TAG_MENSAJE_ERROR_COMPROBAR_LOTE);
                    					} else if(idMensaje.equals(Integer.valueOf(-2))){
                    						exito = false;
                    						responseStatusType.setIdMensaje(ID_MENSAJE_ERROR);
                    						responseStatusType.setStatusCode(TAG_ERROR_COMPROBAR_CANAL);
                    						responseStatusType.setStatusText(TAG_KO);
                    						responseStatusType.setDetails(TAG_MENSAJE_ERROR_COMPROBAR_CANAL);
                    					} else if(idMensaje.equals(Integer.valueOf(-3))){
                    						exito = false;
                    						responseStatusType.setIdMensaje(ID_MENSAJE_ERROR);
                    						responseStatusType.setStatusCode(TAG_ERROR_COMPROBAR_NOMBREUSUARIO);
                    						responseStatusType.setStatusText(TAG_KO);
                    						responseStatusType.setDetails(TAG_MENSAJE_ERROR_COMPROBAR_NOMBREUSUARIO);
                    					} else if(idMensaje.equals(Integer.valueOf(-10))){
                    						exito = false;
                    						responseStatusType.setIdMensaje(ID_MENSAJE_ERROR);
                    						responseStatusType.setStatusCode(TAG_ERROR_GENERAL);
                    						responseStatusType.setStatusText(TAG_KO);
                    						responseStatusType.setDetails(TAG_MENSAJE_KO_GENERAL);
                    					}
                    					
                    					listaResponse.add(responseStatusType);
                    				}
                					
                				} else {
                					exito = false;
                	    			ResponseStatusType responseStatusType = new ResponseStatusType();
                					responseStatusType.setStatusCode(TAG_ERROR_GENERAL_FORMATO_PETICION_MENSAJE);
                					responseStatusType.setStatusText(TAG_KO);
                					responseStatusType.setDetails(TAG_MENSAJE_KO_GENERAL_FORMATO_PETICION_MENSAJE);
                					listaResponse.add(responseStatusType);
                				}
                				
                			}
                			
                			_return.getMensajes().setMensaje(listaResponse);
                			
                		}

            		} else if(idLote.equals(Integer.valueOf(-1))){
            			exito = false;
            			_return.setIdLoteEnvio(ID_MENSAJE_ERROR);
            			_return.setStatusCode(TAG_ERROR_CREAR_LOTE_APLICACION);
            			_return.setStatusText(TAG_KO);
            			_return.setDetails(TAG_MENSAJE_ERROR_CREAR_LOTE_APLICACION);
            		} else if(idLote.equals(Integer.valueOf(-2))){
            			exito = false;
            			_return.setIdLoteEnvio(ID_MENSAJE_ERROR);
            			_return.setStatusCode(TAG_ERROR_CREAR_LOTE_SERVICIO_APLICACION);
            			_return.setStatusText(TAG_KO);
            			_return.setDetails(TAG_MENSAJE_ERROR_CREAR_LOTE_SERVICIO_APLICACION);
            		} else if(idLote.equals(Integer.valueOf(-3))){
            			exito = false;
            			_return.setIdLoteEnvio(ID_MENSAJE_ERROR);
            			_return.setStatusCode(TAG_ERROR_CREAR_LOTE_SERVICIO_APLICACION);
            			_return.setStatusText(TAG_KO);
            			_return.setDetails(TAG_MENSAJE_ERROR_CREAR_LOTE_SERVICIO_APLICACION);
            		} else if(idLote.equals(Integer.valueOf(-10))){
            			exito = false;
            			_return.setIdLoteEnvio(ID_MENSAJE_ERROR);
            			_return.setStatusCode(TAG_ERROR_GENERAL);
            			_return.setStatusText(TAG_KO);
            			_return.setDetails(TAG_MENSAJE_KO_GENERAL);
            		}
            		
            	}
            	
        	} else {
        		exito = false;
    			_return.setIdLoteEnvio(ID_MENSAJE_ERROR);
    			_return.setStatusCode(TAG_ERROR_GENERAL_FORMATO_PETICION_LOTEENVIO);
    			_return.setStatusText(TAG_KO);
    			_return.setDetails(TAG_MENSAJE_KO_GENERAL_FORMATO_PETICION_LOTEENVIO);
        	}
        	
    	} catch (Exception e) {
    		exito = false;
			ResponseStatusType responseStatusType = new ResponseStatusType();
			responseStatusType.setStatusCode(TAG_ERROR_GENERAL);
			responseStatusType.setStatusText(TAG_KO);
			responseStatusType.setDetails(TAG_MENSAJE_KO_GENERAL);
			listaResponse.add(responseStatusType);
			_return.getMensajes().setMensaje(listaResponse);
		}finally{
			if(_return!=null&&exito){
				dao.endTransaction(true);
			}else{
				dao.endTransaction(false);
			}
			dao.closeAll();
		}
    	
    	return _return;
        
    }
    
    private boolean evaluarLoteEnvio(EnvioNotificacionPushRequest parameters){
    	
    	if(evaluarParametro(parameters.getNombreLote()) && evaluarParametro(parameters.getServicio())
    			&& evaluarParametro(parameters.getUsuario()) && evaluarParametro(parameters.getPassword())){
    		return true;
    	} else {
    		return false;
    	}
    	
    }
    
    private boolean evaluarMensaje(MensajeNotificacionType mensajePush){
    	
		if(null!=mensajePush){
			
			if(evaluarParametro(mensajePush.getIdExterno()) && evaluarParametro(mensajePush.getIdentificadorUsuario())
					&& evaluarParametro(mensajePush.getTitulo()) && evaluarParametro(mensajePush.getCuerpo())){
				return true;
			} else {
				return false;
			}
			
		} else {
			return false;
		}
    	
    }
    
    private boolean evaluarParametro(String parametro){
    	
    	if(null!=parametro && !parametro.isEmpty()){
    		return true;
    	} else {
    		return false;
    	}
    }

}
