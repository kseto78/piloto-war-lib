package es.minhap.plataformamensajeria.iop.services.recepcion;

import es.minhap.plataformamensajeria.iop.beans.RecepcionSMSBean;
import es.minhap.plataformamensajeria.iop.beans.RecibirSMSRequest;
import es.minhap.plataformamensajeria.iop.jdbc.RecepcionSMSDAO;
import es.minhap.plataformamensajeria.iop.services.exceptions.PlataformaBusinessException;
import es.minhap.plataformamensajeria.iop.util.Utils;
import es.minhap.plataformamensajeria.iop.util.WSPlataformaErrors;


/**
 * Please modify this class to meet your needs
 * This class is not complete
 */


/**
 * This class was generated by Apache CXF 2.6.3
 * Generated source version: 2.6.3
 * 
 */

                      
public class IRecepcionMensajesServiceImpl implements IRecepcionMensajesService {
	
	static final String TAG_OK = "OK";
	static final String TAG_KO = "KO";
	static final String TAG_STATUSCODE_OK = "0000";
	static final String TAG_ERROR_PARAMETROS_PETICION = "2000";
	static final String TAG_ERROR_AUTENTICACION_LOTE = "2001";
	static final String TAG_ERROR_SERVICIO_INCORRECTO = "2002";
	static final String TAG_ERROR_SERVICIO_INACTIVO = "2003";
	static final String TAG_ERROR_LOTE = "2004";
	static final String TAG_ERROR_AUTENTICACION_SMS = "2005";
	static final String TAG_ERROR_CANAL_SMS = "2006";
	static final String TAG_ERROR_DESTINATARIO_SMS = "2007";
	static final String TAG_ERROR_SMS = "2008";
	static final String TAG_ERROR_RECEPCION_MENSAJE = "2009";
	static final String TAG_ERROR_NO_SERVICIO = "2010";
	static final String TAG_ERROR_SERVICIO_DUPLICADO = "2011";
	static final String TAG_ERROR_VALIDACION_USER_PASSWORD = "2012";
	static final String TAG_ERROR_VALIDACION_USER_PASSWORD_VARIOS_SERVIDORES = "2013";
	static final String TAG_MENSAJE_OK = "Peticion procesada correctamente";
	static final String TAG_MENSAJE_KO_GENERAL = "Se ha producido un error procesando la recepcion";
	static final String TAG_MENSAJE_KO_PARAMETROS_PETICION  = "La peticion no esta construida correctamente. Faltan campos obligatorios";
	static final String TAG_MENSAJE_KO_NO_SERVICIO = "No existe un servicio con el HEADERSMS de la peticion o esta inactivo";
	static final String TAG_MENSAJE_KO_SERVICIO_DUPLICADO = "Existe mas de un servicio activo con el HEADERSMS de la peticion";
	static final String TAG_MENSAJE_KO_VALIDACION_USER_PASSWORD = "El usuario/password no coincide con el del servidor o existe mas de un servidor";
	static final String TAG_MENSAJE_KO_VALIDACION_USER_PASSWORD_VARIOS_SERVIDORES = "El servidor no esta relacionado con el servicio";
	static final String TAG_ERROR_GENERANDO_RESPUESTA_XML = "Se ha producido un error generando la cadena de respuesta";
	private static int GESTION_MULTIDESTINATARIOS = 1;
	
public RecibirSMSResponse recibirSMS(RecibirSMSRequest recibirSMSRequest) {
        
        RecibirSMSResponse _return = new RecibirSMSResponse();
        _return.setStatus(new ResponseStatusType());
        
        Integer idLote=null;
        
        RecepcionSMSDAO dao = new RecepcionSMSDAO();
        RecepcionSMSBean envioSMS = new RecepcionSMSBean();
        
        dao.beginTransaction();
        try {
        	
        	boolean peticionCorrecta = evaluarPeticion(recibirSMSRequest);
        	        	
        	if(peticionCorrecta){
        		
        		envioSMS = dao.consultarLote(recibirSMSRequest.getRecipient(), recibirSMSRequest.getUser(), recibirSMSRequest.getPassword());
            	//Se valida que se haya recuperado correctamente la informacion de base de datos
        		if(!envioSMS.getServicio().equals("-1") && !envioSMS.getServicio().equals("-2") 
        				&& !envioSMS.getServicio().equals("-4") && !envioSMS.getServicio().equals("-5")){
            		idLote = dao.crearLote(envioSMS.getServicio(), envioSMS.getNombreLote(), envioSMS.getUserAplicacion(), envioSMS.getPasswordAplicacion(),GESTION_MULTIDESTINATARIOS);
        			String errorCrearLote = (WSPlataformaErrors.getErrorCrearLote(idLote));
        			if(errorCrearLote!=null){
        				Integer value = Integer.parseInt(errorCrearLote);
        				switch (value) {
        				case -1:
        					_return.getStatus().setStatusCode(TAG_ERROR_AUTENTICACION_LOTE);
        					break;
        				case -2:
        					_return.getStatus().setStatusCode(TAG_ERROR_SERVICIO_INCORRECTO);
        					break;
        				case -3:
        					_return.getStatus().setStatusCode(TAG_ERROR_SERVICIO_INACTIVO);
        					break;
        				case -10:
        					_return.getStatus().setStatusCode(TAG_ERROR_LOTE);
        					break;
        				default:
        					_return.getStatus().setStatusCode(TAG_ERROR_RECEPCION_MENSAJE);
        					break;
        				}
        				_return.getStatus().setStatusText(TAG_KO);
        				_return.getStatus().setDetails(WSPlataformaErrors.getErrorCrearLote(idLote));
        				dao.endTransaction(false);
        				dao.closeAll();
        				return _return;
        			}
        			
        			Integer idMensaje = dao.crearSMS(idLote, recibirSMSRequest.getSMSText(), recibirSMSRequest.getMessageId(), recibirSMSRequest.getSender(), 
        					envioSMS.getUserAplicacion(), envioSMS.getPasswordAplicacion());
        			
        			String errorCrearSMS = WSPlataformaErrors.getErrorCrearSMS(idMensaje);
        			if(errorCrearSMS!=null){
//        				Integer value = Integer.parseInt(errorCrearLote);
        				switch (idMensaje) {
        				case -1:
        					_return.getStatus().setStatusCode(TAG_ERROR_AUTENTICACION_SMS);
        					break;
        				case -2:
        					_return.getStatus().setStatusCode(TAG_ERROR_CANAL_SMS);
        					break;
        				case -3:
        					_return.getStatus().setStatusCode(TAG_ERROR_DESTINATARIO_SMS);
        					break;
        				case -10:
        					_return.getStatus().setStatusCode(TAG_ERROR_SMS);
        					break;
        				default:
        					_return.getStatus().setStatusCode(TAG_ERROR_RECEPCION_MENSAJE);
        					break;
        				}
        				_return.getStatus().setStatusText(TAG_KO);
        				_return.getStatus().setDetails(errorCrearSMS);
        			}else{
        				dao.setDestinatarioMensajeSMS(idMensaje.toString(),recibirSMSRequest.getSender(),null, envioSMS.getUserAplicacion());
        				_return.getStatus().setStatusCode(TAG_STATUSCODE_OK);
            			_return.getStatus().setStatusText(TAG_OK);
            			_return.getStatus().setDetails(TAG_MENSAJE_OK);
        			}
        			dao.connClose();
    	        	
            	} else if(envioSMS.getServicio().equals("-1")) {
            		_return.getStatus().setStatusCode(TAG_ERROR_NO_SERVICIO);
        			_return.getStatus().setStatusText(TAG_KO);
        			_return.getStatus().setDetails(TAG_MENSAJE_KO_NO_SERVICIO);
            	} else if(envioSMS.getServicio().equals("-2")){
            		_return.getStatus().setStatusCode(TAG_ERROR_SERVICIO_DUPLICADO);
        			_return.getStatus().setStatusText(TAG_KO);
        			_return.getStatus().setDetails(TAG_MENSAJE_KO_SERVICIO_DUPLICADO);
            	} else if(envioSMS.getServicio().equals("-4")){
            		_return.getStatus().setStatusCode(TAG_ERROR_VALIDACION_USER_PASSWORD);
            		_return.getStatus().setStatusText(TAG_KO);
        			_return.getStatus().setDetails(TAG_MENSAJE_KO_VALIDACION_USER_PASSWORD);
            	} else if(envioSMS.getServicio().equals("-5")){
            		_return.getStatus().setStatusCode(TAG_ERROR_VALIDACION_USER_PASSWORD_VARIOS_SERVIDORES);
            		_return.getStatus().setStatusText(TAG_KO);
        			_return.getStatus().setDetails(TAG_MENSAJE_KO_VALIDACION_USER_PASSWORD_VARIOS_SERVIDORES);
            	}   

        	} else {
        		_return.getStatus().setStatusCode(TAG_ERROR_PARAMETROS_PETICION);
    			_return.getStatus().setStatusText(TAG_KO);
    			_return.getStatus().setDetails(TAG_MENSAJE_KO_PARAMETROS_PETICION);
        	}
        	
		} catch (Exception e) {
			_return.getStatus().setStatusCode(TAG_ERROR_RECEPCION_MENSAJE);
			_return.getStatus().setStatusText(TAG_KO);
			_return.getStatus().setDetails(TAG_MENSAJE_KO_GENERAL);
		}finally{
			if(_return!=null&&_return.getStatus().getStatusCode().equals(TAG_STATUSCODE_OK)){
				dao.endTransaction(true);
			}else{
				dao.endTransaction(false);
			}
			dao.closeAll();
		}
		return _return;
    }

	

	@Override
	public String recibirSMSXML(RecibirSMSRequest recepcionMensajes) {
		RecibirSMSResponse respuesta = this.recibirSMS(recepcionMensajes);
		String res = "";
		try {
			res = Utils.convertToUTF8(respuesta.toXML());
		} catch (PlataformaBusinessException e) {
			res = Utils.convertToUTF8(TAG_ERROR_GENERANDO_RESPUESTA_XML);
		}
		return res;
	}
    
    private boolean evaluarPeticion(RecibirSMSRequest recibirSMSRequest){
    	
    	if(evaluarParametro(recibirSMSRequest.getUser()) && evaluarParametro(recibirSMSRequest.getPassword())
    			&& evaluarParametro(recibirSMSRequest.getSender()) && evaluarParametro(recibirSMSRequest.getRecipient())
    			&& evaluarParametro(recibirSMSRequest.getMessageId()) && evaluarParametro(recibirSMSRequest.getMessageId())){
    		recibirSMSRequest.setRecipient(Utils.eliminarPrefijo(recibirSMSRequest.getRecipient()));
    		return true;
    	} else {
    		return false;
    	}
    	
    }
    
    private boolean evaluarParametro(String parametro){
    	
    	if(null!=parametro && !parametro.isEmpty()){
    		return true;
    	} else {
    		return false;
    	}
    }

  

}
