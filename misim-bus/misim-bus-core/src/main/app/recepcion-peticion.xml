<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf" xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="CE-3.5.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd">
	<spring:beans>
<!-- 		<spring:bean id="inicializar" name="inicializar" class="es.minhap.misim.components.Inicializar"/> -->
<!-- 		<spring:bean id="identificarAplicacion" name="identificarAplicacion" class="es.minhap.misim.components.IdentificarAplicacion"/> -->
<!-- 		<spring:bean id="identificarProducto" name="identificarProducto" class="es.minhap.misim.components.IdentificarProducto"/> -->
<!-- 		<spring:bean id="identificarProveedor" name="identificarProveedor" class="es.minhap.misim.components.IdentificarProveedor"/> -->
<!-- 		<spring:bean id="validarFirma" name="validarFirma" class="es.minhap.misim.components.ValidarFirma"/> -->
<!-- 		<spring:bean id="firmar" name="firmar" class="es.minhap.misim.components.Firmar"/> -->
<!-- 		<spring:bean id="encriptar" name="encriptar" class="es.minhap.misim.components.Encriptar"/> -->
<!-- 		<spring:bean id="encriptarProveedor" name="encriptarProveedor" class="es.minhap.misim.components.EncriptarProveedor"/> -->
<!-- 		<spring:bean id="desencriptar" name="desencriptar" class="es.minhap.misim.components.Desencriptar"/> -->
<!-- 		<spring:bean id="audit" name="audit" class="es.minhap.misim.components.Auditar"/> -->
<!-- 		<spring:bean id="updateAudit" name="updateAudit" class="es.minhap.misim.components.ActualizarAuditoria"/> -->
<!-- 		<spring:bean id="updateAuditFault" name="updateAuditFault" class="es.minhap.misim.components.ActualizarAuditoriaFault"/> -->
<!-- 		<spring:bean id="invocarEmisor" name="invocarEmisor" class="es.minhap.misim.components.InvocarEmisor"/> -->
<!--  		<spring:bean id="validarXSDPeticion" name="validarXSDPeticion" class="es.minhap.misim.components.ValidarXSDPeticion"/>  -->
<!--  		<spring:bean id="validarXSDRespuesta" name="validarXSDRespuesta" class="es.minhap.misim.components.ValidarXSDRespuesta"/> -->
<!-- 		<spring:bean id="gestionErrores" name="gestionErrores" class="es.minhap.misim.components.GestionErrores"/> -->
	</spring:beans>

	<flow name="FLW-RCP-PET" doc:name="FLW-RCP-PET" doc:description="Procesa una nueva Peticion">
			
		<!-- RECEPCION PETICION -->
		<vm:inbound-endpoint exchange-pattern="request-response" path="recepcion-sincrona" responseTimeout="120000" doc:name="VM"/>
			
		<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionPeticion] - Inicio peticion" />
		
<!-- 		<choice doc:name="Protocolo de comunicacion"> -->
<!-- 			<when expression="#[payload.soapAction == '${PETICION_SINCRONA}']"> -->
<!-- 				<processor-chain doc:name="Processor Chain"> -->
<!-- 					<logger level="INFO" doc:name="Logger" message="Antes del subfujo FLW-RCP-SIN de la peticion sincronizada el payload es : #[payload]" /> -->
<!-- 					<set-variable variableName="${TIPO_COMUNICACION}" value="${SINCRONO}" doc:name="Tipo de comunicacion sincrona" /> -->
<!-- 					<flow-ref name="FLW-RCP-SIN" doc:name="Procesa la peticion sincrona" /> -->
<!-- 					<logger level="INFO" doc:name="Logger" message="Despues del subfujo FLW-RCP-SIN de la peticion sincronizada el payload es: #[payload]" /> -->
<!-- 				</processor-chain> -->
<!-- 			</when> -->
<!-- 			<otherwise> -->
<!-- 				<processor-chain doc:name="Processor Chain"> -->
<!-- 					<logger level="INFO" doc:name="Logger" message="Antes del subfujo FLW-RCP-ASI de la peticion asincrona el payload es : #[payload]" /> -->
<!-- 					<set-variable variableName="${TIPO_COMUNICACION}" value="${ASINCRONO}"  doc:name="Tipo de comunicacion asincrona" /> -->
<!-- 					<flow-ref name="FLW-RCP-ASI" doc:name="Procesa la peticion asincrona" /> -->
<!-- 					<logger level="INFO" doc:name="Logger" message="Despues del subfujo FLW-RCP-ASI de la peticion asincrona el payload es : #[payload]" /> -->
<!-- 				</processor-chain> -->
<!-- 			</otherwise> -->
<!-- 		</choice> -->

		<!-- INICIALIZAR VARIABLES -->
<!-- 		<logger level="INFO" doc:name="Logger" message="Inicializar variables" /> -->
<!-- 		<component	doc:name="Inicializa variables" > -->
<!-- 			<spring-object bean="inicializar" /> -->
<!-- 		</component> -->

<!-- 		<set-property propertyName="${XML_PETICION}" value="#[groovy:misim.bus.common.util.XMLUtils.dom2xml(payload.soapMessage)]"  doc:name="Property XML_PETICION" /> -->
		
		<!-- INDENTIFICAR APLICACION -->
<!-- 		<logger level="INFO" doc:name="Logger" message="Indentificacion de la aplicacion" /> -->
<!-- 		<component	doc:name="Recupera la configuracion del cliente" > -->
<!-- 			<spring-object bean="identificarAplicacion" /> -->
<!-- 		</component> -->
		
		<!-- LOGGER APLICACION -->
<!-- 		<logger level="INFO" doc:name="Logger" message="Endpoint #[message.outboundProperties['${ID_APLICACION}']]" /> -->
			
		<!-- INDENTIFICAR DEL PRODUCTO -->
<!-- 		<logger level="INFO" doc:name="Logger" message="Indentificacion del producto" /> -->
<!-- 		<component	doc:name="Recupera la configuracion del producto" > -->
<!-- 			<spring-object bean="identificarProducto" /> -->
<!-- 		</component> -->
		
		<!-- LOGGER PRODUCTO -->
<!-- 		<logger level="INFO" doc:name="Logger" message="Endpoint #[message.outboundProperties['${ID_PRODUCTO}']]" /> -->
		
		<!-- INDENTIFICAR DEL PROVEEDOR -->
<!-- 		<logger level="INFO" doc:name="Logger" message="Indentificacion del proveedor" /> -->
<!-- 		<component	doc:name="Recupera la configuracion del proveedor" > -->
<!-- 			<spring-object bean="identificarProveedor" /> -->
<!-- 		</component> -->

		<!-- LOGGER PROVEEDOR -->
<!-- 		<logger level="INFO" doc:name="Logger" message="Endpoint #[message.outboundProperties['${ID_PROVEEDOR}']]" /> -->
			
		<!-- ENCRIPTACION -->
<!-- 		<logger level="INFO" doc:name="Logger" message="Encriptacion para la auditoria" /> -->
<!-- 		<processor-chain doc:name="Processor Chain"> -->
<!-- 			<component	doc:name="Encripta" > -->
<!-- 				<spring-object bean="encriptar" /> -->
<!-- 			</component> -->
<!-- 		</processor-chain> -->
		
		<!-- AUDITORIA -->
<!-- 		<logger level="INFO" doc:name="Logger" message="Auditoria de la peticion recibida" /> -->
<!-- 		<component	doc:name="Audita" > -->
<!-- 			<spring-object bean="audit" /> -->
<!-- 		</component> -->
		
		<!-- RECUPERACION DEL BACKUP-->
<!-- 		<set-payload value="#[flowVars['${XML_PETICION}']]" doc:name="Vuelta a la peticion original" /> -->
		
		<!-- VALIDAR XSD -->
<!-- 		<logger level="INFO" doc:name="Logger" message="Validar XSD" /> -->
<!-- 		<component	doc:name="Validar XSD" > -->
<!-- 			<spring-object bean="validarXSDPeticion" /> -->
<!-- 		</component> -->
		
		<!-- ADAPTAR PETICION -->
<!-- 		<processor-chain> -->
<!-- 			<set-variable variableName="${XSL_SHEET}" value="#[message.outboundProperties['${XSL_PETICION}']]" doc:name="Hoja XSL para transformar el payload" /> -->
			
<!-- 			<logger level="INFO" doc:name="Logger" message="Transformacion del mensaje de la peticion" /> -->
<!-- 			<logger level="INFO" doc:name="Logger" message="Antes del subfujo FLW-MSG-ADP de adaptacion del protocolo el payload es : #[payload]" /> -->
			
<!-- 			<flow-ref name="FLW-MSG-ADP" doc:name="Adaptar protocolo hacia Emisor" /> -->
			
<!-- 			<logger level="INFO" doc:name="Logger" message="Flujo de ida adaptado" /> -->
<!-- 			<logger level="INFO" doc:name="Logger" message="Despues del subfujo FLW-MSG-ADP de adaptacion del protocolo el payload es : #[payload]" /> -->
<!-- 		</processor-chain> -->
		
		<!-- SECURIZACION PETICION-->
<!-- 		<logger level="INFO" doc:name="Logger" message="Preparacion de la securizacion" /> -->
<!-- 		<logger level="INFO" doc:name="Logger" message="Antes del subfujo FLW-SEG-PET de securizacion el payload es : #[payload]" /> -->
<!-- 		<flow-ref name="FLW-SEG-PET" doc:name="Securizar peticion" /> -->
<!-- 		<logger level="INFO" doc:name="Logger" message="Fludo de ida securizado" /> -->
<!-- 		<logger level="INFO" doc:name="Logger" message="Despues del subfujo FLW-SEG-PET de securizacion el payload es : #[payload]" /> -->
		
		<!-- INVOCACION AL EMISOR -->
<!-- 		<logger level="INFO" doc:name="Logger" message="Invocacion del Emisor" /> -->
<!-- 		<logger level="INFO" doc:name="Logger" message="Endpoint #[message.outboundProperties['${ENDPOINT_URL}']]" /> -->
<!-- 		<component	doc:name="Invocar Emisor" > -->
<!-- 			<spring-object bean="invocarEmisor" /> -->
<!-- 		</component> -->
<!-- 		<logger level="INFO" doc:name="Logger" message="Emisor Invocado" /> -->
		
		<!-- COMPROBAR SOAP_FAULT -->
<!-- 		<logger level="INFO" doc:name="Logger" message="Comprobar SOAP Fault" /> -->
<!-- 		<choice doc:name="Respuesta o SOAP Fault"> -->
<!-- 			<when expression="#[message.outboundProperties['${SOAP_FAULT}']]"> -->
<!-- 				<processor-chain> -->
<!-- 					<logger level="INFO" doc:name="Logger" message="SOAP Fault recibido" /> -->
<!-- 					<set-variable variableName="${XSL_SHEET}" value="#[message.outboundProperties['${XSL_SOAP_FAULT}']]" doc:name="Hoja XSL para transformar el error SOAP" /> -->
<!-- 				</processor-chain> -->
<!-- 			</when> -->
<!-- 			<otherwise> -->
<!-- 				<processor-chain> -->
<!-- 					<logger level="INFO" doc:name="Logger" message="Respuesta recibida" /> -->
<!-- 					<set-variable variableName="${XSL_SHEET}" value="#[message.outboundProperties['${XSL_RESPUESTA}']]" doc:name="Hoja XSL para transformar la respuesta" /> -->
<!-- 				</processor-chain> -->
<!-- 			</otherwise> -->
<!-- 		</choice> -->
		
		<!-- DES-SECURIZAR RESPUESTA -->
<!-- 		<processor-chain> -->
<!-- 			<logger level="INFO" doc:name="Logger" message="Preparacion de la dessecurizacion" /> -->
<!-- 			<logger level="INFO" doc:name="Logger" message="Antes del subfujo FLW-SEG-RES de dessecurizacion el payload es : #[payload]" /> -->
<!-- 			<flow-ref name="FLW-SEG-RES" doc:name="Securizar respuesta" /> -->
<!-- 			<logger level="INFO" doc:name="Logger" message="Fludo de ida securizado" /> -->
<!-- 			<logger level="INFO" doc:name="Logger" message="Despues del subfujo FLW-SEG-PET de securizacion el payload es : #[payload]" /> -->
<!-- 		</processor-chain> -->
		
		<!-- VALIDAR XSD -->
<!-- 		<logger level="INFO" doc:name="Logger" message="Validar XSD" /> -->
<!-- 		<component	doc:name="Validar XSD" > -->
<!-- 			<spring-object bean="validarXSDRespuesta" /> -->
<!-- 		</component> -->
		
		<!-- ADAPTAR PROTOCOLO -->
<!-- 		<processor-chain> -->
<!-- 			<logger level="INFO" doc:name="Logger" message="Transformacion del mensaje recibido" /> -->
<!-- 			<logger level="INFO" doc:name="Logger" message="Antes del subfujo FLW-MSG-ADP de adaptacion del protocolo el payload es : #[payload]" /> -->
			
<!-- 			<flow-ref name="FLW-MSG-ADP" doc:name="Adaptar protocolo hacia misim" /> -->
			
<!-- 			<logger level="INFO" doc:name="Logger" message="Flujo de vuelta adaptado" /> -->
<!-- 			<logger level="INFO" doc:name="Logger" message="Despues del subfujo FLW-MSG-ADP de adaptacion del protocolo el payload es : #[payload]" /> -->
<!-- 		</processor-chain> -->
		
<!-- 		<set-property propertyName="${XML_RESPUESTA}" value="#[groovy:misim.bus.common.util.XMLUtils.dom2xml(payload.soapMessage)]"  doc:name="Property XML_RESPUESTA" /> -->
		
		<!-- ENCRIPTACION -->
<!-- 		<logger level="INFO" doc:name="Logger" message="Comprobar si se requiere encriptacion para la auditoria" /> -->
<!-- 		<processor-chain doc:name="Processor Chain"> -->
<!-- 			<logger level="INFO" message="Encriptacion requerida" doc:name="Logger" /> -->
<!-- 			<component	doc:name="Encripta" > -->
<!-- 				<spring-object bean="encriptar" /> -->
<!-- 			</component> -->
<!-- 		</processor-chain> -->
		
		<!-- ACTUALIZACION DE AUDITORIA -->
<!-- 		<logger level="INFO" doc:name="Logger" message="Actualizacion de la auditoria" /> -->
<!-- 		<component doc:name="Actualizacon de Auditoria"> -->
<!-- 			<spring-object bean="updateAudit" /> -->
<!-- 		</component> -->
		
		<!-- RECUPERACION DEL BACKUP -->
<!-- 		<set-payload value="#[flowVars['${XML_RESPUESTA}']]" doc:name="Vuelta a la peticion original" /> -->

		<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionPeticion] - Peticion procesada" />
        
        <!-- GESTION DE ERRORES -->
        
        <catch-exception-strategy doc:name="Catch Exception Strategy">
        	
        	<!-- GENERAR EL SOAP FAULT -->
<!--         	<component	doc:name="Gestion de errores" > -->
<!-- 				<spring-object bean="gestionErrores" /> -->
<!-- 			</component> -->
			
<!-- 			<set-property propertyName="${XML_FAULT}" value="#[groovy:misim.bus.common.util.XMLUtils.dom2xml(payload.soapMessage)]"  doc:name="Property XML_FAULT" /> -->
					
			<!-- ENCRIPTACION -->
<!-- 			<logger level="INFO" doc:name="Logger" message="Comprobar si se requiere encriptacion para la auditoria" /> -->
<!-- 			<processor-chain doc:name="Processor Chain"> -->
<!-- 				<logger level="INFO" message="Encriptacion requerida" doc:name="Logger" /> -->
<!-- 				<component	doc:name="Encripta" > -->
<!-- 					<spring-object bean="encriptar" /> -->
<!-- 				</component> -->
<!-- 			</processor-chain> -->
				
			<!-- ACTUALIZACION DE AUDITORIA -->
<!--         	<logger level="INFO" doc:name="Logger" message="Comprobar actualizacion de la auditoria" /> -->
<!--         	<choice doc:name="Encriptacion del error al Consumidor"> -->
<!-- 				<when expression="#[message.outboundProperties['${ID_AUDITORIA}'] != '']"> -->
<!-- 					<processor-chain doc:name="Processor Chain"> -->
<!-- 						<logger level="INFO" doc:name="Logger" message="Actualizacion de la auditoria fault" /> -->
<!-- 						<component doc:name="Actualizacion de auditoria Fault"> -->
<!-- 							<spring-object bean="updateAuditFault" /> -->
<!-- 						</component> -->
<!-- 					</processor-chain> -->
<!-- 				</when> -->
<!-- 				<otherwise> -->
<!-- 					<logger level="INFO" message="Actualizacion de auditoria no requerida" doc:name="Logger" /> -->
<!-- 				</otherwise> -->
<!-- 			</choice>	 -->
			
			<!-- RECUPERACION DEL BACKUP -->
<!-- 			<set-payload value="#[flowVars['${XML_FAULT}']]" doc:name="Vuelta a la peticion original" /> -->
	
			<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionPeticion] - SOAP Fault procesado" />
		
        </catch-exception-strategy>
	</flow>
</mule>
