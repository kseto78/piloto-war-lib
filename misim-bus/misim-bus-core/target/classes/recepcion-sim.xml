<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf" xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="CE-3.5.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd">
	<spring:beans>
		
		<spring:bean id="inicializarCliente" name="inicializarCliente" class="es.minhap.misim.components.InicializarAplicacionCliente"/>
		
		<spring:bean id="identificarTipoPeticion" name="identificarTipoPeticion" class="es.minhap.misim.components.IdentificarTipoPeticion" />
		
		<spring:bean id="invocarEnvioEmail" name="invocarEnvioEmail" class="es.minhap.misim.components.InvocarEnvioEmail" />
		<spring:bean id="invocarEnvioSMS" name="invocarEnvioSMS" class="es.minhap.misim.components.InvocarEnvioSMS" />
		<spring:bean id="invocarEnvioPush" name="invocarEnvioPush" 	class="es.minhap.misim.components.InvocarEnvioPush" />
		<spring:bean id="invocarEnvioWebPush" name="invocarEnvioWebPush" 	class="es.minhap.misim.components.InvocarEnvioWebPush" />
		
		<spring:bean id="invocarConsultaEstado" name="invocarConsultaEstado" class="es.minhap.misim.components.InvocarConsultaEstado" />
		<spring:bean id="invocarConsultaHistorial" name="invocarConsultaHistorial" class="es.minhap.misim.components.InvocarConsultaHistorial" />
		
		<spring:bean id="invocarAnularMensaje" name="invocarAnularMensaje" class="es.minhap.misim.components.InvocarAnularMensaje" />
		<spring:bean id="invocarAnularLote" name="invocarAnularLote" class="es.minhap.misim.components.InvocarAnularLote" />
		<spring:bean id="invocarReenviarMensaje" name="invocarReenviarMensaje" class="es.minhap.misim.components.InvocarReenviarMensaje" />
		<spring:bean id="invocarReenviarLote" name="invocarReenviarLote" class="es.minhap.misim.components.InvocarReenviarLote" />
		
		
		<spring:bean id="gestionErroresAplicaciones" name="gestionErroresAplicaciones" class="es.minhap.misim.components.GestionErroresAplicaciones"/>
	
	</spring:beans>

	<!-- DESDE LAS APLICACONES A MISIM (CON LA LIBRERIA PARA INTRODUCIR BBDD) -->

	<flow name="FLW-RCP-SIM" doc:name="FLW-RCP-SIM" doc:description="Procesa una nueva Peticion">

		<!-- RECEPCION PETICION -->
		<vm:inbound-endpoint exchange-pattern="request-response" path="recepcion-sim" responseTimeout="120000" doc:name="VM" />

		<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Inicio peticion" />

		<!-- INICIALIZAR VARIABLES -->
		<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Inicializar variables" />
		<component doc:name="Inicializa variables">
			<spring-object bean="inicializarCliente" />
		</component>

		<set-property propertyName="${XML_PETICION}" value="#[groovy:misim.bus.common.util.XMLUtils.dom2xml(payload.soapMessage)]"	doc:name="Property XML_PETICION" />

		<!-- INDENTIFICAR TIPO DE PETICION -->
		<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Identificacion de la peticion" />
		<component doc:name="Recupera la informacion del tipo de peticion">
			<spring-object bean="identificarTipoPeticion" />
		</component>
		
		<!-- LOGGER TIPO PETICION -->
		<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - TIPO PETICION #[message.outboundProperties['${TIPO_PETICION}']]" />

		<!-- ENCRIPTACION -->
		<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Encriptacion para la auditoria" />
		<processor-chain doc:name="Processor Chain">
			<component	doc:name="Encripta" >
				<spring-object bean="encriptar" />
			</component>
		</processor-chain>
		
		<!-- AUDITORIA -->
		<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Auditoria de la peticion recibida" /> 
			<component doc:name="Audita" >
			<spring-object bean="audit" />
		</component>
		
		<!-- ADAPTAR PROTOCOLO -->
		<choice doc:name="Adaptar la peticion"> 
			<when expression="#[message.outboundProperties['${TRANSFORMACION_PETICION}'] == 'S']">
				<processor-chain>
					<set-variable variableName="${XSL_SHEET}" value="#[message.outboundProperties['${XSL_PETICION}']]" doc:name="Hoja XSL para transformar el payload" />
					
					<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Adaptacion de la peticion" />
					
					<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Antes del subfujo FLW-MSG-ADP de adaptacion del protocolo el payload es : #[payload]" />
					<flow-ref name="FLW-MSG-ADP" doc:name="Adaptar protocolo hacia misim" />
					<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Despues del subfujo FLW-MSG-ADP de adaptacion del protocolo el payload es : #[payload]" />
				</processor-chain>
			</when>
			<otherwise>
				<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - No se requiere de adaptacion de la peticion" />
			</otherwise>
		</choice>

		<!-- INVOCACION DEL ENVIADOR -->
		<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Invocacion del enviador" />
		<choice doc:name="Tipo de ennvio">

			<when expression="#[message.outboundProperties['${TIPO_PETICION}'] == '${enviarEmail}']">
				<processor-chain doc:name="Processor Chain">
					<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Enviar MAIL" />
					<component doc:name="Invocar envio Email">
						<spring-object bean="invocarEnvioEmail" />
					</component>
				</processor-chain>
			</when>
			<when expression="#[message.outboundProperties['${TIPO_PETICION}'] == '${enviarSMS}']">
				<processor-chain doc:name="Processor Chain">
					<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Enviar SMS" />
					<component doc:name="Invocar envio SMS">
						<spring-object bean="invocarEnvioSMS" />
					</component>
				</processor-chain>
			</when>
			<when expression="#[message.outboundProperties['${TIPO_PETICION}'] == '${enviarPUSH}']">
				<processor-chain doc:name="Processor Chain">
					<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Enviar PUSH" />
					<component doc:name="Invocar envio PUSH">
						<spring-object bean="invocarEnvioPush" />
					</component>
				</processor-chain>
			</when>
			<when expression="#[message.outboundProperties['${TIPO_PETICION}'] == '${enviarWebPUSH}']">
				<processor-chain doc:name="Processor Chain">
					<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Enviar WEB PUSH" />
					<component doc:name="Invocar envio Web PUSH">
						<spring-object bean="invocarEnvioWebPush" />
					</component>
				</processor-chain>
			</when>
			<when expression="#[message.outboundProperties['${TIPO_PETICION}'] == '${consultarEstado}']">
				<processor-chain doc:name="Processor Chain">
					<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Consultar estado" />
					<component doc:name="Invocar consulta estado">
						<spring-object bean="invocarConsultaEstado" />
					</component>
				</processor-chain>
			</when>
			<when expression="#[message.outboundProperties['${TIPO_PETICION}'] == '${consultarHistorial}']">
				<processor-chain doc:name="Processor Chain">
					<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Consultar historial" />
					<component doc:name="Invocar consulta estado">
						<spring-object bean="invocarConsultaHistorial" />
					</component>
				</processor-chain>
			</when>
			<when expression="#[message.outboundProperties['${TIPO_PETICION}'] == '${anularMensaje}']">
				<processor-chain doc:name="Processor Chain">
					<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Anular mensaje" />
					<component doc:name="Invocar consulta estado">
						<spring-object bean="invocarAnularMensaje" />
					</component>
				</processor-chain>
			</when>
			<when expression="#[message.outboundProperties['${TIPO_PETICION}'] == '${anularLote}']">
				<processor-chain doc:name="Processor Chain">
					<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Anular lote" />
					<component doc:name="Invocar consulta estado">
						<spring-object bean="invocarAnularLote" />
					</component>
				</processor-chain>
			</when>
			<when expression="#[message.outboundProperties['${TIPO_PETICION}'] == '${reenviarMensaje}']">
				<processor-chain doc:name="Processor Chain">
					<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Reenviar mensaje" />
					<component doc:name="Invocar consulta estado">
						<spring-object bean="invocarReenviarMensaje" />
					</component>
				</processor-chain>
			</when>
			<when expression="#[message.outboundProperties['${TIPO_PETICION}'] == '${reenviarLote}']">
				<processor-chain doc:name="Processor Chain">
					<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Reenviar lote" />
					<component doc:name="Invocar consulta estado">
						<spring-object bean="invocarReenviarLote" />
					</component>
				</processor-chain>
			</when>
			<otherwise>
				<processor-chain doc:name="Processor Chain">
					<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Ninguna operacion disponible" />
				</processor-chain>
			</otherwise>
		</choice>
		<logger level="INFO" doc:name="Logger" message="Operacion invocada #[payload]" />

		<!-- ADAPTAR PROTOCOLO -->		
		<choice doc:name="Adaptar la respuesta"> 
			<when expression="#[message.outboundProperties['${TRANSFORMACION_RESPUESTA}'] == 'S']">
				<processor-chain>		
					<set-variable variableName="${XSL_SHEET}" value="#[message.outboundProperties['${XSL_RESPUESTA}']]" doc:name="Hoja XSL para transformar la respuesta" />	
							
					<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Adaptacion de la respuesta" />
					<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Antes del subfujo FLW-MSG-ADP de adaptacion del protocolo el payload es : #[payload]" />
					<flow-ref name="FLW-MSG-ADP" doc:name="Adaptar protocolo hacia Aplicacion Cliente" />
					<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Despues del subfujo FLW-MSG-ADP de adaptacion del protocolo el payload es : #[payload]" />
				</processor-chain>
			</when>
			<otherwise>
				<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - No se requiere de adaptacion de la respuesta" />
			</otherwise>
		</choice>
		
		<set-property propertyName="${XML_RESPUESTA}" value="#[groovy:misim.bus.common.util.XMLUtils.dom2xml(payload.soapMessage)]"  doc:name="Property XML_RESPUESTA" />
		
		<!-- ENCRIPTACION -->
		<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Comprobar si se requiere encriptacion para la auditoria" />
		<processor-chain doc:name="Processor Chain">
			<logger level="INFO" message="[FLOW - RecepcionSIM] - Encriptacion requerida" doc:name="Logger" />
			<component	doc:name="Encripta" >
				<spring-object bean="encriptar" />
			</component>
		</processor-chain>
		
		<!-- ACTUALIZACION DE AUDITORIA -->
		<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Actualizacion de la auditoria" />
		<component doc:name="Actualizacon de Auditoria">
			<spring-object bean="updateAudit" />
		</component>

		<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Peticion procesada" />

		<!-- GESTION DE ERRORES -->

		<catch-exception-strategy doc:name="Catch Exception Strategy">

			<!-- GENERAR EL SOAP FAULT -->
			<component doc:name="Gestion de errores" >
				<spring-object bean="gestionErroresAplicaciones" />
			</component>

			<set-property propertyName="${XML_FAULT}" value="#[groovy:misim.bus.common.util.XMLUtils.dom2xml(payload.soapMessage)]"  doc:name="Property XML_FAULT" />
				
			<!-- ACTUALIZACION DE AUDITORIA -->
        	<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Comprobar actualizacion de la auditoria" />
        	<choice doc:name="Encriptacion del error al Consumidor">
				<when expression="#[message.outboundProperties['${ID_AUDITORIA}'] != '']">
					<!-- ENCRIPTACION -->
					<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Comprobar si se requiere encriptacion para la auditoria" />
					<processor-chain doc:name="Processor Chain">
						<logger level="INFO" message="[FLOW - RecepcionSIM] - Encriptacion requerida" doc:name="Logger" />
						<component	doc:name="Encripta" >
							<spring-object bean="encriptar" />
						</component>
					</processor-chain>
					<processor-chain doc:name="Processor Chain">
						<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - Actualizacion de la auditoria fault" />
						<component doc:name="Actualizacion de auditoria Fault">
							<spring-object bean="updateAuditFault" />
						</component>
					</processor-chain>
				</when>
				<otherwise>
					<logger level="INFO" message="[FLOW - RecepcionSIM] - Actualizacion de auditoria no requerida" doc:name="Logger" />
				</otherwise>
			</choice>	

			<logger level="INFO" doc:name="Logger" message="[FLOW - RecepcionSIM] - SOAP Fault procesado" />

		</catch-exception-strategy>
	</flow>
</mule>
